Generation:
16

Phenotype:
def p():
  x = 0.0
  n = 144
  for i in [1, 2, 3]:
    n = 198
    if PX_OPEN[65] + PX_HIGH[95] + PX_LOW[53] < PX_LOW[197] + PX_OPEN[131] + PX_LOW[16] + PX_OPEN[86] + PX_LOW[91]:
      n = 21
      if PX_OPEN[35] + PX_HIGH[73] + PX_LOW[124] + PX_HIGH[185] > PX_HIGH[52] + PX_OPEN[47] + PX_HIGH[174]:
        for i in range(6+1):
          x = x
        n = 224
        x = (x + 0.2)
        x = x
      n = 210
      x = (x + 0.4)
      n = 160
      x = (x / 0.1)
      x = (x - 0.5)
      x = x
    if PX_LOW[71] + PX_HIGH[226] * PX_LOW[12] == PX_OPEN[189] + PX_LOW[151] / PX_LOW[224] * PX_LOW[89] + sum(PX_LOW[-n:])/n:
      n = 148
      n = 183
      x = (x - 0.9)
    if sum(PX_HIGH[-n:])/n - PX_LOW[111] ** PX_LOW[238] + PX_LOW[108] > sum(PX_LOW[-n:])/n + sum(PX_OPEN[-n:])/n ** PX_OPEN[157] + PX_HIGH[111] + PX_HIGH[171]:
      if PX_LOW[58] + PX_LOW[2] == PX_LOW[161]:
        x = (x / 0.1)
    if PX_HIGH[140] + PX_HIGH[38] > sum(PX_HIGH[-n:])/n * sum(PX_LOW[-n:])/n + sum(PX_LOW[-n:])/n:
      n = 111
      for i in range(0+1):
        x = x
    if PX_LOW[236] + PX_HIGH[160] + PX_OPEN[220] + PX_OPEN[238] < PX_HIGH[148] + PX_OPEN[4] + PX_HIGH[176]:
      x = x
      x = 0.5
    for i in range(0+1):
      n = 203
      x = (x - 1.0)
    x = (x * 0.3)
  n = 205
  for i in [3]:
    n = 147
    n = 119
    if sum(PX_HIGH[-n:])/n > PX_OPEN[113]:
      x = x
  for i in [1, 0, 5]:
    n = 136
    n = 193
    n = 19
    n = 104
    if PX_HIGH[241] < sum(PX_HIGH[-n:])/n / sum(PX_LOW[-n:])/n:
      x = (x / 0.9)
      x = x
  return x
XXX_output_XXX = p()

Genotype:
[63786, 50031, 9655, 17674, 22878, 21054, 61655, 62765, 24955, 64621, 81139, 79723, 70316, 53517, 39162, 27258, 19978, 75475, 87572, 67205, 32012, 18851, 8128, 28987, 1387, 16388, 98563, 24691, 91310, 11252, 37046, 3310, 14559, 60424, 31962, 10803, 29666, 99162, 55748, 58201, 26470, 37731, 39794, 73159, 24028, 24325, 22385, 64678, 49959, 39559, 10101, 87237, 20014, 5594, 25128, 57416, 18952, 53108, 88604, 69928, 43435, 39038, 82764, 66579, 97954, 72859, 65711, 76399, 36284, 90839, 64298, 29208, 78700, 12729, 23018, 29400, 34404, 31917, 87440, 59734, 3690, 80648, 33756, 53735, 88346, 81725, 83274, 57809, 4985, 20796, 40150, 2811, 55705, 24695, 86854, 54643, 56867, 61349, 46900, 6871, 23410, 84837, 62494, 99271, 96257, 54209, 56123, 93408, 82951, 63155, 7265, 51667, 8314, 9752, 18969, 94298, 54569, 64834, 57643, 55446, 21037, 11066, 65938, 6725, 21186, 81467, 46580, 71773, 8989, 53087, 16845, 8010, 9149, 65, 62931, 86914, 9483, 81801, 61723, 92127, 14310, 96357, 88125, 10050, 51099, 84093, 8458, 49054, 30539, 69673, 19607, 89867, 88077, 96642, 36874, 75006, 47165, 71477, 66644, 94975, 65360, 37825, 47271, 65337, 44163, 42674, 6407, 52870, 24067, 39162, 54507, 84822, 96759, 48749, 24673, 71618, 57603, 61847, 21090, 98921, 33555, 88579, 20922, 64438, 18942, 58003, 92147, 15608, 96755, 15333, 77180, 137, 48944, 24796, 16436, 69424, 34846, 82561, 7866, 11089, 93154, 11016, 89268, 20246, 63842, 67573, 64560, 51132, 49938, 83579, 6952, 80280, 2166, 95310, 93068, 48702, 66501, 45805, 77486, 57107, 89924, 22213, 24262, 86426, 91776, 82241, 40533, 76708, 51037, 44721, 22020, 6023, 54750, 57157, 52520, 25401, 64091, 60866, 77626, 82371, 37674, 62614, 86458, 710, 49515, 28275, 87170, 45088, 78578, 58568, 39106, 29455, 38711, 38312, 10898, 14705, 91460, 56850, 13835, 49868, 52484, 26010, 785, 48253, 77089, 46530, 54446, 37601, 60953, 12165, 74073, 51329, 65874, 60969, 24380, 22569, 21245, 57784, 47679, 70969, 73247, 84072, 96518, 90010, 15779, 52219, 47927, 36121, 75713, 2451, 17850, 32596, 25071, 10554, 39042, 35473, 30731, 79476, 72178, 38963, 99622, 51035, 39160, 6015, 6844, 60970, 47715, 56539, 63616, 82925, 12735, 34042, 21850, 90525, 17659, 61249, 70785, 75077, 67406, 29758, 15457, 75431, 81724, 93288, 58126, 70521, 26710, 48796, 49955, 2871, 98427, 41180, 12070, 27312, 74550, 45100, 51266, 96337, 81600, 1018, 63646, 75059, 34588, 52833, 31107, 7035, 54967, 19190, 49371, 42269, 40518, 23035, 51664, 8839, 31046, 29829, 76875, 62349, 23680, 49929, 60574, 13320, 8219, 46142, 73955, 69055, 45876, 19209, 50120, 87945, 22336, 12302, 96015, 22629, 70373, 69433, 78176, 30739, 20373, 24133, 12440, 92579, 4080, 4345, 79960, 20978, 26114, 2930, 94008, 86184, 70522, 68696, 89319, 68234, 35904, 16283, 93620, 68498, 52715, 59719, 23307, 45755, 22331, 63698, 59576, 80325, 68001, 9269, 53223, 5034, 42957, 94985, 58704, 91078, 5145, 33342, 23050, 36293, 42124, 73577, 32183, 72901, 92537, 20823, 84507, 99628, 75846, 21341, 60932, 27176, 20608, 19990, 97006, 18908, 46349, 16978, 15047, 88761, 95582, 10832, 10332, 31852, 59005, 77610, 25567, 17818, 22103, 59315, 60025, 28741, 62736, 50314, 42482, 49066, 26743, 2518, 51502, 76124, 67985, 34641, 36950, 19864, 79097, 0, 76581, 13581, 4895, 85689, 82156, 50936, 48475, 82321, 12110, 95708, 36839, 33773, 91449, 82058, 61080, 56003, 15434, 99246, 67414, 11012, 16180, 54909, 79114, 72443, 64633, 9630, 79888, 17198, 70851, 1609, 32053, 17992, 4815, 73219, 65767, 42937, 25271, 83571, 79737, 9169, 50746, 47097, 92732, 27656, 13251, 10081, 89105, 91420, 72192, 34062, 7346, 44029, 60462, 63731, 1886, 46458, 47826, 74347, 30648, 27773, 55691, 95258, 35601, 26020, 36693, 42696, 83428, 9190, 37877, 24259, 82805, 97331, 17261, 80713, 90965, 50399, 1176, 50815, 19231, 66887, 38315, 37987, 45974, 48107, 34955, 81218, 28585, 94946, 5996, 617, 35270, 77038, 82180, 59258, 95012, 18033, 98841, 29718, 52376, 26558, 60188, 10329, 43969, 31638, 54957, 59980, 96324, 16315, 84280, 73338, 23399, 86412, 99142, 99522, 36979, 22475, 34567, 31574, 35758, 21057, 52807, 82425, 30235, 1904, 7936, 65406, 86977, 50204]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<a> n =  (<n> 144)) {::} (<code> (<stmt> (<for> for i in  (<seq> [ (<csitems> (<item> (<i> 1)) ,  (<csitems> (<item> (<i> 2)) ,  (<csitems> (<item> (<i> 3))))) ]) :{: (<code> (<a> n =  (<n> 198)) {::} (<code> (<stmt> (<if> if  (<data> (<combo> (<data> (<sum> (<point> PX_OPEN[ (<n> 65) ])  +  (<sum> (<point> PX_HIGH[ (<n> 95) ])  +  (<point> PX_LOW[ (<n> 53) ]))))))   (<eval> <)   (<data> (<sum> (<point> PX_LOW[ (<n> 197) ])  +  (<sum> (<point> PX_OPEN[ (<n> 131) ])  +  (<sum> (<point> PX_LOW[ (<n> 16) ])  +  (<sum> (<point> PX_OPEN[ (<n> 86) ])  +  (<point> PX_LOW[ (<n> 91) ])))))) :{: (<code> (<a> n =  (<n> 21)) {::} (<code> (<stmt> (<if> if  (<data> (<sum> (<point> PX_OPEN[ (<n> 35) ])  +  (<sum> (<point> PX_HIGH[ (<n> 73) ])  +  (<sum> (<point> PX_LOW[ (<n> 124) ])  +  (<point> PX_HIGH[ (<n> 185) ])))))   (<eval> >)   (<data> (<sum> (<point> PX_HIGH[ (<n> 52) ])  +  (<sum> (<point> PX_OPEN[ (<n> 47) ])  +  (<point> PX_HIGH[ (<n> 174) ])))) :{: (<code> (<stmt> (<for> for i in  (<seq> range( (<i> 6) +1)) :{: (<code> (<stmt> x =  (<expr> x))) :})) {::} (<code> (<a> n =  (<n> 224)) {::} (<code> (<stmt> x =  (<expr> (x +  (<const> 0.2) ))) {::} (<code> (<stmt> x =  (<expr> x)))))) :})) {::} (<code> (<a> n =  (<n> 210)) {::} (<code> (<stmt> x =  (<expr> (x +  (<const> 0.4) ))) {::} (<code> (<a> n =  (<n> 160)) {::} (<code> (<stmt> x =  (<expr> (x /  (<const> 0.1) ))) {::} (<code> (<stmt> x =  (<expr> (x -  (<const> 0.5) ))) {::} (<code> (<stmt> x =  (<expr> x)))))))))) :})) {::} (<code> (<stmt> (<if> if  (<data> (<combo> (<data> (<sum> (<point> PX_LOW[ (<n> 71) ])  +  (<point> PX_HIGH[ (<n> 226) ])))   (<combine> *)   (<data> (<combo> (<data> (<combo> (<data> (<point> PX_LOW[ (<n> 12) ]))))))))   (<eval> ==)   (<data> (<combo> (<data> (<sum> (<point> PX_OPEN[ (<n> 189) ])  +  (<point> PX_LOW[ (<n> 151) ])))   (<combine> /)   (<data> (<combo> (<data> (<combo> (<data> (<point> PX_LOW[ (<n> 224) ]))   (<combine> *)   (<data> (<point> PX_LOW[ (<n> 89) ]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> sum(PX_LOW[-n:])/n)))))))) :{: (<code> (<a> n =  (<n> 148)) {::} (<code> (<a> n =  (<n> 183)) {::} (<code> (<stmt> x =  (<expr> (x -  (<const> 0.9) )))))) :})) {::} (<code> (<stmt> (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> sum(PX_HIGH[-n:])/n))   (<combine> -)   (<data> (<point> PX_LOW[ (<n> 111) ]))))   (<combine> **)   (<data> (<sum> (<point> PX_LOW[ (<n> 238) ])  +  (<point> PX_LOW[ (<n> 108) ])))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> sum(PX_LOW[-n:])/n))   (<combine> +)   (<data> (<n_avg> sum(PX_OPEN[-n:])/n))))))   (<combine> **)   (<data> (<sum> (<point> PX_OPEN[ (<n> 157) ])  +  (<sum> (<point> PX_HIGH[ (<n> 111) ])  +  (<point> PX_HIGH[ (<n> 171) ])))))) :{: (<code> (<stmt> (<if> if  (<data> (<combo> (<data> (<point> PX_LOW[ (<n> 58) ]))   (<combine> +)   (<data> (<point> PX_LOW[ (<n> 2) ]))))   (<eval> ==)   (<data> (<point> PX_LOW[ (<n> 161) ])) :{: (<code> (<stmt> x =  (<expr> (x /  (<const> 0.1) )))) :}))) :})) {::} (<code> (<stmt> (<if> if  (<data> (<sum> (<point> PX_HIGH[ (<n> 140) ])  +  (<point> PX_HIGH[ (<n> 38) ])))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> sum(PX_HIGH[-n:])/n))))   (<combine> *)   (<data> (<combo> (<data> (<n_avg> sum(PX_LOW[-n:])/n))   (<combine> +)   (<data> (<n_avg> sum(PX_LOW[-n:])/n)))))) :{: (<code> (<a> n =  (<n> 111)) {::} (<code> (<stmt> (<for> for i in  (<seq> range( (<i> 0) +1)) :{: (<code> (<stmt> x =  (<expr> x))) :})))) :})) {::} (<code> (<stmt> (<if> if  (<data> (<sum> (<point> PX_LOW[ (<n> 236) ])  +  (<sum> (<point> PX_HIGH[ (<n> 160) ])  +  (<sum> (<point> PX_OPEN[ (<n> 220) ])  +  (<point> PX_OPEN[ (<n> 238) ])))))   (<eval> <)   (<data> (<combo> (<data> (<sum> (<point> PX_HIGH[ (<n> 148) ])  +  (<point> PX_OPEN[ (<n> 4) ])))   (<combine> +)   (<data> (<point> PX_HIGH[ (<n> 176) ])))) :{: (<code> (<stmt> x =  (<expr> x)) {::} (<code> (<stmt> x =  (<expr> (<const> 0.5))))) :})) {::} (<code> (<stmt> (<for> for i in  (<seq> range( (<i> 0) +1)) :{: (<code> (<a> n =  (<n> 203)) {::} (<code> (<stmt> x =  (<expr> (x -  (<const> 1.0) ))))) :})) {::} (<code> (<stmt> x =  (<expr> (x *  (<const> 0.3) ))))))))))) :})) {::} (<code> (<a> n =  (<n> 205)) {::} (<code> (<stmt> (<for> for i in  (<seq> [ (<csitems> (<item> (<i> 3))) ]) :{: (<code> (<a> n =  (<n> 147)) {::} (<code> (<a> n =  (<n> 119)) {::} (<code> (<stmt> (<if> if  (<data> (<n_avg> sum(PX_HIGH[-n:])/n))   (<eval> >)   (<data> (<point> PX_OPEN[ (<n> 113) ])) :{: (<code> (<stmt> x =  (<expr> x))) :}))))) :})) {::} (<code> (<stmt> (<for> for i in  (<seq> [ (<csitems> (<item> (<i> 1)) ,  (<csitems> (<item> (<i> 0)) ,  (<csitems> (<item> (<i> 5))))) ]) :{: (<code> (<a> n =  (<n> 136)) {::} (<code> (<a> n =  (<n> 193)) {::} (<code> (<a> n =  (<n> 19)) {::} (<code> (<a> n =  (<n> 104)) {::} (<code> (<stmt> (<if> if  (<data> (<point> PX_HIGH[ (<n> 241) ]))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> sum(PX_HIGH[-n:])/n))   (<combine> /)   (<data> (<n_avg> sum(PX_LOW[-n:])/n)))) :{: (<code> (<stmt> x =  (<expr> (x /  (<const> 0.9) ))) {::} (<code> (<stmt> x =  (<expr> x)))) :}))))))) :})))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
910309.598538