Generation:
10

Phenotype:
def p():
  x = 0.0
  for i in [3, 1, 4, 3]:
    if sum(PX_LOW[-185:])/len(PX_LOW[-146:]) == sum(PX_OPEN[-123:])/len(PX_OPEN[-12:]):
      x = (x * 0.4)
    if PX_HIGH[94] > PX_LOW[31]:
      x = x
  if PX_LOW[45] + PX_OPEN[80] < PX_HIGH[82] + PX_OPEN[5]:
    if sum(PX_LOW[-113:])/len(PX_LOW[-184:]) > PX_LOW[110]:
      x = x
    x = 0.3
    x = 0.9
    x = x
  return x
XXX_output_XXX = p()

Genotype:
[35598, 92352, 62643, 68575, 49567, 55988, 5650, 5777, 20412, 48129, 75667, 82411, 92357, 16530, 45811, 96957, 45079, 727, 57217, 1432, 69767, 64230, 26333, 86946, 36179, 73076, 50629, 94579, 8330, 84465, 75749, 71587, 63240, 33493, 19786, 89920, 84889, 26910, 93048, 50521, 30399, 89246, 26010, 1597, 72383, 22745, 47117, 48969, 66862, 78481, 90435, 60636, 9567, 17404, 10829, 98974, 34183, 21832, 87255, 27834, 37972, 13106, 48839, 30258, 23956, 65635, 10688, 36049, 34663, 14164, 53350, 42134, 89253, 95282, 80413, 88317, 70152, 33255, 80730, 85620, 98523, 97447, 73428, 6974, 41441, 65946, 51501, 96163, 7376, 10271, 53282, 16114, 69225, 85201, 8878, 32944, 83141, 96420, 46258, 80935, 52039, 60034, 55710, 36965, 25430, 26096, 27350, 1009, 80522, 70727, 87483, 12043, 74181, 55, 88542, 55532, 46813, 45459, 63855, 3553, 59316, 22679, 39904, 5892, 83465, 67724, 41523, 5844, 22995, 6676, 43413, 66525, 99493, 48972, 78655, 85374]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<stmt> (<for> for i in  (<seq> [ (<csitems> (<item> (<i> 3)) ,  (<csitems> (<item> (<i> 1)) ,  (<csitems> (<item> (<i> 4)) ,  (<csitems> (<item> (<i> 3)))))) ]) :{: (<code> (<stmt> (<if> if  (<data> (<n_avg> sum(PX_LOW[- (<n> 185) :])/len(PX_LOW[- (<n> 146) :])))   (<eval> ==)   (<data> (<n_avg> sum(PX_OPEN[- (<n> 123) :])/len(PX_OPEN[- (<n> 12) :]))) :{: (<code> (<stmt> x =  (<expr> (x *  (<const> 0.4) )))) :})) {::} (<code> (<stmt> (<if> if  (<data> (<point> PX_HIGH[ (<n> 94) ]))   (<eval> >)   (<data> (<point> PX_LOW[ (<n> 31) ])) :{: (<code> (<stmt> x =  (<expr> x))) :})))) :})) {::} (<code> (<stmt> (<if> if  (<data> (<combo> (<data> (<sum> (<point> PX_LOW[ (<n> 45) ])  +  (<point> PX_OPEN[ (<n> 80) ])))))   (<eval> <)   (<data> (<sum> (<point> PX_HIGH[ (<n> 82) ])  +  (<point> PX_OPEN[ (<n> 5) ]))) :{: (<code> (<stmt> (<if> if  (<data> (<n_avg> sum(PX_LOW[- (<n> 113) :])/len(PX_LOW[- (<n> 184) :])))   (<eval> >)   (<data> (<point> PX_LOW[ (<n> 110) ])) :{: (<code> (<stmt> x =  (<expr> x))) :})) {::} (<code> (<stmt> x =  (<expr> (<const> 0.3))) {::} (<code> (<stmt> x =  (<expr> (<const> 0.9))) {::} (<code> (<stmt> x =  (<expr> x)))))) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Training fitness:
24048.8770836
Test fitness:
10205.1544069