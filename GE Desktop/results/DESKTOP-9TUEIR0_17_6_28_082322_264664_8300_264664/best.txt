Generation:
0

Phenotype:
def p():
  x = 0.0
  n = 158
  b = 119
  c = PX_OPEN[-1]
  if PX_OPEN[101] > PX_LOW[b]:
    x = 0.2
  n = 99
  b = 140
  c = sum(PX_OPEN[-n:])/n
  if c < PX_HIGH[-1] * PX_LOW[b]:
    x = (x - 0.9)
  n = 63
  b = 80
  c = sum(PX_OPEN[-n:])/n
  if c < PX_OPEN[-1]:
    x = (x * 0.8)
  n = 137
  b = 161
  c = PX_HIGH[b]
  if PX_LOW[-1] < sum(PX_OPEN[-n:])/n:
    x = (x * 0.3)
  n = 151
  b = 218
  c = sum(PX_HIGH[-n:])/n
  if c < sum(PX_HIGH[-n:])/n:
    x = (x - 0.3)
  n = 62
  b = 231
  c = PX_OPEN[b]
  if sum(PX_OPEN[-n:])/n > PX_HIGH[71]:
    x = (x * 0.9)
  n = 50
  b = 66
  c = sum(PX_HIGH[-n:])/n
  if PX_LOW[b] > sum(PX_OPEN[-n:])/n:
    x = (x - 0.8)
  n = 31
  b = 164
  c = PX_OPEN[-1]
  if c < PX_LOW[b]:
    x = (x - 0.9)
  n = 235
  b = 97
  c = PX_OPEN[b]
  if c > PX_OPEN[-1]:
    x = 0.5
  n = 189
  b = 62
  c = PX_LOW[-1] - PX_HIGH[b]
  if PX_HIGH[5] < PX_OPEN[-1] / sum(PX_LOW[-n:])/n:
    x = (x + 0.2)
  n = 110
  b = 67
  c = PX_LOW[75]
  if PX_HIGH[b] > PX_OPEN[-1]:
    x = (x * 1.0)
  n = 166
  b = 58
  c = PX_HIGH[-1]
  if c > sum(PX_OPEN[-n:])/n:
    x = (x + 0.4)
  n = 73
  b = 138
  c = PX_LOW[b]
  if c > PX_HIGH[-1]:
    x = (x - 0.9)
  n = 115
  b = 70
  c = PX_OPEN[127]
  if sum(PX_OPEN[-n:])/n < PX_LOW[103]:
    x = (x / 0.6)
  n = 208
  b = 150
  c = PX_LOW[b]
  if c < sum(PX_OPEN[-n:])/n:
    x = (x + 0.5)
  n = 43
  b = 13
  c = PX_OPEN[b]
  if PX_HIGH[-1] > PX_LOW[b]:
    x = (x * 0.1)
  n = 232
  b = 93
  c = PX_LOW[-1]
  if sum(PX_OPEN[-n:])/n < PX_LOW[-1]:
    x = (x + 0.1)
  return x
XXX_output_XXX = p()

Genotype:
[92904, 49402, 52297, 64982, 86118, 33772, 53580, 94954, 99299, 82270, 26195, 3657, 12166, 66861, 65397, 35401, 47546, 61658, 16827, 61742, 87962, 59783, 56417, 26540, 1292, 21388, 28510, 83865, 66281, 13500, 12111, 57877, 37981, 404, 82546, 87773, 77010, 16775, 31779, 86050, 15424, 30086, 81078, 11377, 22909, 12843, 4449, 20676, 64934, 44658, 18503, 32623, 81945, 99483, 20653, 18066, 50986, 57174, 22286, 75384, 59447, 14978, 68375, 22669, 46996, 12783, 32780, 60802, 81758, 84792, 50328, 22873, 87066, 50440, 46950, 9107, 92251, 37138, 10625, 47208, 41493, 58303, 74165, 44566, 61977, 53542, 91230, 74173, 50181, 60774, 9362, 11618, 33128, 39180, 17367, 54349, 97001, 71201, 19772, 26451, 3724, 59952, 68254, 14154, 800, 77454, 20579, 30555, 81452, 44210, 88665, 89348, 89014, 36288, 6123, 1034, 79322, 6060, 95370, 14254, 79619, 39138, 49260, 39508, 11207, 49399, 51133, 7600, 3877, 15904, 60248, 80964, 24352, 48997, 74288, 28714, 15664, 78230, 40268, 4185, 98215, 24962, 51834, 63263, 17686, 18028, 31190, 2918, 86149, 57858, 83692, 63574, 49013, 54682, 19876, 79554, 89356, 41305, 51690, 59273, 41626, 26393, 67996, 55973, 22726, 15788, 88565, 33399, 53974, 95460, 86953, 23842, 93097, 25744, 16224, 36984, 29118, 3360, 19288, 37472, 89482, 53967, 10486, 27901, 27695, 54682, 19978, 63526, 24194, 60813, 79618, 16609, 7515, 84355, 43012, 17169, 93215, 16018, 66819, 84716, 21582, 99796, 59851, 9611, 14163, 37591, 39001, 45138, 42659, 60940, 88345, 80568, 78321, 30969, 20356, 85094, 40803, 13596, 58611, 21684, 67361, 60810, 12558, 62814, 92561, 90671, 79137, 13965, 57331, 29136, 98403, 84277, 17347, 55109, 34067, 47872, 35177, 82078, 27019, 3582, 14373, 41378, 26744, 68150, 59969, 44504, 79362, 73321, 19445, 83899, 18225, 27842, 30401, 84488, 62507, 92336, 53785, 5923, 23965, 3090, 35585, 17793, 23192, 45080, 75730, 15506, 30954, 58117, 12129, 25039, 81608, 63302, 77680, 29023, 45331, 92560, 39806, 73778, 62574, 92163, 27794, 46730, 69538, 3130, 29351, 61066, 5750, 59948, 71142, 85571, 38703, 51092, 88568, 95446, 9985, 67005, 13397, 69315, 47688, 28055, 95646, 70378, 91237, 81916, 78083, 74265, 69706, 77937, 41545, 7715, 75423, 42630, 90997, 44530, 72542, 13684, 81339, 78559, 60958, 86011, 44721, 24121, 4443, 39461, 9245, 13476, 65563, 55805, 45287, 75861, 4814, 72178, 51623, 31839, 96861, 40532, 74540, 85163, 16926, 8030, 48869, 27969, 59804, 52724, 63912, 49157, 59588, 80429, 36111, 7988, 37428, 81403, 92391, 91189, 92212, 68195, 55586, 42202, 39920, 44727, 87386, 47797, 27658, 37563, 51374, 93625, 9821, 14615, 48626, 64447, 74017, 71720, 59312, 54532, 91171, 51679, 46783, 13613, 53353, 36986, 84257, 18351, 94475, 18895, 54068, 80449, 65737, 15011, 2507, 86050, 94137, 77728, 7107, 79423, 65548, 47257, 24405, 84803, 79236, 41225, 96698, 94983, 11256, 90712, 7274, 93707, 85083, 31301, 10782, 52293, 96525, 5774, 63901, 65791, 72386, 27558, 62116, 86701, 52265, 8510]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<a> n =  (<n> 158)) {::} (<b> b =  (<n> 119)) {::} (<c> c =  (<data> (<point_today> PX_OPEN[-1]))) {::} (<if> if  (<data> (<point> PX_OPEN[ (<n> 101) ]))   (<eval> >)   (<data> (<point> PX_LOW[b])) :{:x =  (<expr> (<const> 0.2)) :}) {::} (<code> (<a> n =  (<n> 99)) {::} (<b> b =  (<n> 140)) {::} (<c> c =  (<data> (<n_avg> sum(PX_OPEN[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<combo> (<data> (<point_today> PX_HIGH[-1]))   (<combine> *)   (<data> (<point> PX_LOW[b])))) :{:x =  (<expr> (x -  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 63)) {::} (<b> b =  (<n> 80)) {::} (<c> c =  (<data> (<n_avg> sum(PX_OPEN[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point_today> PX_OPEN[-1])) :{:x =  (<expr> (x *  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 137)) {::} (<b> b =  (<n> 161)) {::} (<c> c =  (<data> (<point> PX_HIGH[b]))) {::} (<if> if  (<data> (<point_today> PX_LOW[-1]))   (<eval> <)   (<data> (<n_avg> sum(PX_OPEN[-n:])/n)) :{:x =  (<expr> (x *  (<const> 0.3) )) :})) {::} (<code> (<a> n =  (<n> 151)) {::} (<b> b =  (<n> 218)) {::} (<c> c =  (<data> (<n_avg> sum(PX_HIGH[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> sum(PX_HIGH[-n:])/n)) :{:x =  (<expr> (x -  (<const> 0.3) )) :}))) {::} (<code> (<a> n =  (<n> 62)) {::} (<b> b =  (<n> 231)) {::} (<c> c =  (<data> (<point> PX_OPEN[b]))) {::} (<if> if  (<data> (<n_avg> sum(PX_OPEN[-n:])/n))   (<eval> >)   (<data> (<point> PX_HIGH[ (<n> 71) ])) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 66)) {::} (<c> c =  (<data> (<n_avg> sum(PX_HIGH[-n:])/n))) {::} (<if> if  (<data> (<point> PX_LOW[b]))   (<eval> >)   (<data> (<n_avg> sum(PX_OPEN[-n:])/n)) :{:x =  (<expr> (x -  (<const> 0.8) )) :})) {::} (<code> (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 164)) {::} (<c> c =  (<data> (<point_today> PX_OPEN[-1]))) {::} (<if> if c  (<eval> <)   (<data> (<point> PX_LOW[b])) :{:x =  (<expr> (x -  (<const> 0.9) )) :})) {::} (<code> (<a> n =  (<n> 235)) {::} (<b> b =  (<n> 97)) {::} (<c> c =  (<data> (<point> PX_OPEN[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point_today> PX_OPEN[-1])) :{:x =  (<expr> (<const> 0.5)) :})))) {::} (<code> (<a> n =  (<n> 189)) {::} (<b> b =  (<n> 62)) {::} (<c> c =  (<data> (<combo> (<data> (<point_today> PX_LOW[-1]))   (<combine> -)   (<data> (<point> PX_HIGH[b]))))) {::} (<if> if  (<data> (<point> PX_HIGH[ (<n> 5) ]))   (<eval> <)   (<data> (<combo> (<data> (<point_today> PX_OPEN[-1]))   (<combine> /)   (<data> (<n_avg> sum(PX_LOW[-n:])/n)))) :{:x =  (<expr> (x +  (<const> 0.2) )) :}) {::} (<code> (<a> n =  (<n> 110)) {::} (<b> b =  (<n> 67)) {::} (<c> c =  (<data> (<point> PX_LOW[ (<n> 75) ]))) {::} (<if> if  (<data> (<point> PX_HIGH[b]))   (<eval> >)   (<data> (<point_today> PX_OPEN[-1])) :{:x =  (<expr> (x *  (<const> 1.0) )) :}) {::} (<code> (<a> n =  (<n> 166)) {::} (<b> b =  (<n> 58)) {::} (<c> c =  (<data> (<point_today> PX_HIGH[-1]))) {::} (<if> if c  (<eval> >)   (<data> (<n_avg> sum(PX_OPEN[-n:])/n)) :{:x =  (<expr> (x +  (<const> 0.4) )) :})) {::} (<code> (<a> n =  (<n> 73)) {::} (<b> b =  (<n> 138)) {::} (<c> c =  (<data> (<point> PX_LOW[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point_today> PX_HIGH[-1])) :{:x =  (<expr> (x -  (<const> 0.9) )) :}))) {::} (<code> (<a> n =  (<n> 115)) {::} (<b> b =  (<n> 70)) {::} (<c> c =  (<data> (<point> PX_OPEN[ (<n> 127) ]))) {::} (<if> if  (<data> (<n_avg> sum(PX_OPEN[-n:])/n))   (<eval> <)   (<data> (<point> PX_LOW[ (<n> 103) ])) :{:x =  (<expr> (x /  (<const> 0.6) )) :}) {::} (<code> (<a> n =  (<n> 208)) {::} (<b> b =  (<n> 150)) {::} (<c> c =  (<data> (<point> PX_LOW[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> sum(PX_OPEN[-n:])/n)) :{:x =  (<expr> (x +  (<const> 0.5) )) :})) {::} (<code> (<a> n =  (<n> 43)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<point> PX_OPEN[b]))) {::} (<if> if  (<data> (<point_today> PX_HIGH[-1]))   (<eval> >)   (<data> (<point> PX_LOW[b])) :{:x =  (<expr> (x *  (<const> 0.1) )) :})) {::} (<code> (<a> n =  (<n> 232)) {::} (<b> b =  (<n> 93)) {::} (<c> c =  (<data> (<point_today> PX_LOW[-1]))) {::} (<if> if  (<data> (<n_avg> sum(PX_OPEN[-n:])/n))   (<eval> <)   (<data> (<point_today> PX_LOW[-1])) :{:x =  (<expr> (x +  (<const> 0.1) )) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
1205084.58145