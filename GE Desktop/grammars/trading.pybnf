# see fitness/trading.py for docs.

<p>::= <defp>{::}<callp>
<defp> ::= def p():{:x = 0.0{::}<code>{::}return x:}
<callp> ::= XXX_output_XXX = p()

# These are used to define indexes in data
<a> ::= n = <n>
<b> ::= b = <n>
<n> ::= GE_RANGE:246

# a function is a list of statements
<code> ::= <a>{::}<b>{::}<if> | <a>{::}<b>{::}<if>{::}<code> | <a>{::}<b>{::}<if>{::}<code>{::}<code>  |
<a>{::}<b>{::}<if>{::}<code>{::}<code>{::}<code>

# Trees are created by if statements
<if> ::= if <data> <eval> <data>:{:x = <expr>:}
<data> ::= <n_avg> | <point> | <point_today> | <combo> | <const>
<eval> ::= > | <
<expr> ::= <const> | (x + <const>) | (x - <const>) | (x * <const>) | (x / <const>)
<const> ::= 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1.0

<combo> ::= <data> <combine> <data>
<combine> ::= + | - | * | /

<point> ::= PX_OPEN[b] | PX_HIGH[b] | PX_LOW[b] | PX_OPEN[<n>] | PX_HIGH[<n>] | PX_LOW[<n>]
<point_today> ::= PX_OPEN[-1] | PX_HIGH[-1] | PX_LOW[-1]
<n_avg> ::= sum(PX_OPEN[-n:])/n | sum(PX_HIGH[-n:])/n | sum(PX_LOW[-n:])/n

